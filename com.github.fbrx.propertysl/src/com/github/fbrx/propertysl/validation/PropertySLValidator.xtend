/*
 * generated by Xtext
 */
package com.github.fbrx.propertysl.validation

import com.github.fbrx.propertysl.propertySL.ComplexPropertyValue
import com.github.fbrx.propertysl.propertySL.ComplexPropertyValueItem
import com.github.fbrx.propertysl.propertySL.DefaultableLocale
import com.github.fbrx.propertysl.propertySL.Package
import com.github.fbrx.propertysl.propertySL.PropertySLPackage
import com.github.fbrx.propertysl.propertySL.SupportedLocales
import java.util.ArrayList
import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class PropertySLValidator extends AbstractPropertySLValidator {


	/** Generated if a complex property is missig an entry for a supported locale */
	public static final String MISSING_LOCALE_DEFINITION = "MISSING_LOCALE_DEFINITION"
	
	/** Generated if none of the supported locales is marked as default */
	public static final String DEFAULT_LOCALE_NOT_SET = "DEFAULT_LOCALE_NOT_SET"
	
	/** Generated if a complex property value has an item for a non supported locale */
	public static final String LOCALE_NOT_SUPPORTED = "LOCALE_NOT_SUPPORTED"
	
	@Check
	def checkIfDefaultLocaleIsSet(SupportedLocales sl){
		if(sl.locales.size > 1){
			var defaultSet = false
			var dLangs = new ArrayList<String>()
			for(DefaultableLocale dl : sl.locales){
				dLangs.add(dl.lang)
				if(dl.isDefault)
					defaultSet = true
			}
			
			if(!defaultSet){
				warning("Default locale should be specified.", PropertySLPackage.Literals.SUPPORTED_LOCALES__LOCALES, DEFAULT_LOCALE_NOT_SET, dLangs);
			}
		}
	}
	
	@Check
	def checkLocaleOfComplexPropertyValue(ComplexPropertyValueItem item){
		val pkg = item.eContainer.eContainer.eContainer as Package
		var foundLocale = false
		for(DefaultableLocale dl : pkg.supportedLocales.locales){
			if(dl.lang.equals(item.lang)){
				foundLocale = true
			}
		}
		
		if(!foundLocale){
			warning("Locale \""+ item.lang +"\" is not supported.", PropertySLPackage.Literals.COMPLEX_PROPERTY_VALUE_ITEM__LANG, LOCALE_NOT_SUPPORTED, item.lang)
		}
	}
	
	@Check
	def checkIfAllLocalesAreSpecifiedOnProperty(ComplexPropertyValue prop){
		val pkg = prop.eContainer.eContainer as Package
		var specifiedLanguages = new ArrayList<String>;
		
		for(ComplexPropertyValueItem item : prop.items){
			specifiedLanguages.add(item.lang)
		}

		var supportedLocales = new ArrayList();
		for(DefaultableLocale dl : pkg.supportedLocales.locales)
			supportedLocales.add(dl.lang)
		
		supportedLocales.removeAll(specifiedLanguages)
		if(supportedLocales.size > 0){
			for(String s : supportedLocales){
				warning("Supported locale \"" + s + "\" should be specified.", PropertySLPackage.Literals.COMPLEX_PROPERTY_VALUE__ITEMS, MISSING_LOCALE_DEFINITION, s)
			}
			
		}
	}
	
}
