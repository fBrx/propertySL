/**
 * generated by Xtext
 */
package com.github.fbrx.propertysl.validation;

import com.github.fbrx.propertysl.propertySL.ComplexPropertyValue;
import com.github.fbrx.propertysl.propertySL.ComplexPropertyValueItem;
import com.github.fbrx.propertysl.propertySL.DefaultableLocale;
import com.github.fbrx.propertysl.propertySL.PropertySLPackage.Literals;
import com.github.fbrx.propertysl.propertySL.SupportedLocales;
import com.github.fbrx.propertysl.validation.AbstractPropertySLValidator;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class PropertySLValidator extends AbstractPropertySLValidator {
  /**
   * Generated if a complex property is missig an entry for a supported locale
   */
  public final static String MISSING_LOCALE_DEFINITION = "MISSING_LOCALE_DEFINITION";
  
  /**
   * Generated if none of the supported locales is marked as default
   */
  public final static String DEFAULT_LOCALE_NOT_SET = "DEFAULT_LOCALE_NOT_SET";
  
  /**
   * Generated if a complex property value has an item for a non supported locale
   */
  public final static String LOCALE_NOT_SUPPORTED = "LOCALE_NOT_SUPPORTED";
  
  @Check
  public void checkIfDefaultLocaleIsSet(final SupportedLocales sl) {
    EList<DefaultableLocale> _locales = sl.getLocales();
    int _size = _locales.size();
    boolean _greaterThan = (_size > 1);
    if (_greaterThan) {
      boolean defaultSet = false;
      ArrayList<String> _arrayList = new ArrayList<String>();
      ArrayList<String> dLangs = _arrayList;
      EList<DefaultableLocale> _locales_1 = sl.getLocales();
      for (final DefaultableLocale dl : _locales_1) {
        {
          String _lang = dl.getLang();
          dLangs.add(_lang);
          boolean _isIsDefault = dl.isIsDefault();
          if (_isIsDefault) {
            defaultSet = true;
          }
        }
      }
      boolean _not = (!defaultSet);
      if (_not) {
        final ArrayList<String> _converted_dLangs = (ArrayList<String>)dLangs;
        this.warning("Default locale should be specified.", Literals.SUPPORTED_LOCALES__LOCALES, PropertySLValidator.DEFAULT_LOCALE_NOT_SET, ((String[])Conversions.unwrapArray(_converted_dLangs, String.class)));
      }
    }
  }
  
  @Check
  public void checkLocaleOfComplexPropertyValue(final ComplexPropertyValueItem item) {
    EObject _eContainer = item.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    EObject _eContainer_2 = _eContainer_1.eContainer();
    final com.github.fbrx.propertysl.propertySL.Package pkg = ((com.github.fbrx.propertysl.propertySL.Package) _eContainer_2);
    boolean foundLocale = false;
    SupportedLocales _supportedLocales = pkg.getSupportedLocales();
    EList<DefaultableLocale> _locales = _supportedLocales.getLocales();
    for (final DefaultableLocale dl : _locales) {
      String _lang = dl.getLang();
      String _lang_1 = item.getLang();
      boolean _equals = _lang.equals(_lang_1);
      if (_equals) {
        foundLocale = true;
      }
    }
    boolean _not = (!foundLocale);
    if (_not) {
      String _lang_2 = item.getLang();
      String _plus = ("Locale \"" + _lang_2);
      String _plus_1 = (_plus + "\" is not supported.");
      String _lang_3 = item.getLang();
      this.warning(_plus_1, Literals.COMPLEX_PROPERTY_VALUE_ITEM__LANG, PropertySLValidator.LOCALE_NOT_SUPPORTED, _lang_3);
    }
  }
  
  @Check
  public void checkIfAllLocalesAreSpecifiedOnProperty(final ComplexPropertyValue prop) {
    EObject _eContainer = prop.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    final com.github.fbrx.propertysl.propertySL.Package pkg = ((com.github.fbrx.propertysl.propertySL.Package) _eContainer_1);
    ArrayList<String> _arrayList = new ArrayList<String>();
    ArrayList<String> specifiedLanguages = _arrayList;
    EList<ComplexPropertyValueItem> _items = prop.getItems();
    for (final ComplexPropertyValueItem item : _items) {
      String _lang = item.getLang();
      specifiedLanguages.add(_lang);
    }
    ArrayList<String> _arrayList_1 = new ArrayList<String>();
    ArrayList<String> supportedLocales = _arrayList_1;
    SupportedLocales _supportedLocales = pkg.getSupportedLocales();
    EList<DefaultableLocale> _locales = _supportedLocales.getLocales();
    for (final DefaultableLocale dl : _locales) {
      String _lang_1 = dl.getLang();
      supportedLocales.add(_lang_1);
    }
    supportedLocales.removeAll(specifiedLanguages);
    int _size = supportedLocales.size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      for (final String s : supportedLocales) {
        String _plus = ("Supported locale \"" + s);
        String _plus_1 = (_plus + "\" should be specified.");
        this.warning(_plus_1, Literals.COMPLEX_PROPERTY_VALUE__ITEMS, PropertySLValidator.MISSING_LOCALE_DEFINITION, s);
      }
    }
  }
}
