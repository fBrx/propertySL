/*
* generated by Xtext
*/
package com.github.fbrx.propertysl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PropertySLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cPackagesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPackagesPackageParserRuleCall_0 = (RuleCall)cPackagesAssignment.eContents().get(0);
		
		//Model:
		//	packages+=Package*;
		public ParserRule getRule() { return rule; }

		//packages+=Package*
		public Assignment getPackagesAssignment() { return cPackagesAssignment; }

		//Package
		public RuleCall getPackagesPackageParserRuleCall_0() { return cPackagesPackageParserRuleCall_0; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cFQNParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDefaultLocaleParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cPackageParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cPropertyParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Package:
		//	"package" FQN "{" DefaultLocale? Package* Property* "}";
		public ParserRule getRule() { return rule; }

		//"package" FQN "{" DefaultLocale? Package* Property* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//FQN
		public RuleCall getFQNParserRuleCall_1() { return cFQNParserRuleCall_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//DefaultLocale?
		public RuleCall getDefaultLocaleParserRuleCall_3() { return cDefaultLocaleParserRuleCall_3; }

		//Package*
		public RuleCall getPackageParserRuleCall_4() { return cPackageParserRuleCall_4; }

		//Property*
		public RuleCall getPropertyParserRuleCall_5() { return cPropertyParserRuleCall_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPropertyKeyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cPropertyValueParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Property:
		//	PropertyKey "=" PropertyValue;
		public ParserRule getRule() { return rule; }

		//PropertyKey "=" PropertyValue
		public Group getGroup() { return cGroup; }

		//PropertyKey
		public RuleCall getPropertyKeyParserRuleCall_0() { return cPropertyKeyParserRuleCall_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//PropertyValue
		public RuleCall getPropertyValueParserRuleCall_2() { return cPropertyValueParserRuleCall_2; }
	}

	public class PropertyKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyKey");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PropertyKey:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyValue");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PropertyValue:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class DefaultLocaleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultLocale");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDEFAULT_LOCALEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLOCALEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DefaultLocale:
		//	"DEFAULT_LOCALE" "=" LOCALE;
		public ParserRule getRule() { return rule; }

		//"DEFAULT_LOCALE" "=" LOCALE
		public Group getGroup() { return cGroup; }

		//"DEFAULT_LOCALE"
		public Keyword getDEFAULT_LOCALEKeyword_0() { return cDEFAULT_LOCALEKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//LOCALE
		public RuleCall getLOCALEParserRuleCall_2() { return cLOCALEParserRuleCall_2; }
	}

	public class LOCALEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOCALE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cDeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEnKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LOCALE:
		//	"de" | "en";
		public ParserRule getRule() { return rule; }

		//"de" | "en"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"de"
		public Keyword getDeKeyword_0() { return cDeKeyword_0; }

		//"en"
		public Keyword getEnKeyword_1() { return cEnKeyword_1; }
	}
	
	
	private ModelElements pModel;
	private PackageElements pPackage;
	private FQNElements pFQN;
	private PropertyElements pProperty;
	private PropertyKeyElements pPropertyKey;
	private PropertyValueElements pPropertyValue;
	private DefaultLocaleElements pDefaultLocale;
	private LOCALEElements pLOCALE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PropertySLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.github.fbrx.propertysl.PropertySL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	packages+=Package*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Package:
	//	"package" FQN "{" DefaultLocale? Package* Property* "}";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//FQN:
	//	ID ("." ID)*;
	public FQNElements getFQNAccess() {
		return (pFQN != null) ? pFQN : (pFQN = new FQNElements());
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}

	//Property:
	//	PropertyKey "=" PropertyValue;
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//PropertyKey:
	//	ID;
	public PropertyKeyElements getPropertyKeyAccess() {
		return (pPropertyKey != null) ? pPropertyKey : (pPropertyKey = new PropertyKeyElements());
	}
	
	public ParserRule getPropertyKeyRule() {
		return getPropertyKeyAccess().getRule();
	}

	//PropertyValue:
	//	ID;
	public PropertyValueElements getPropertyValueAccess() {
		return (pPropertyValue != null) ? pPropertyValue : (pPropertyValue = new PropertyValueElements());
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//DefaultLocale:
	//	"DEFAULT_LOCALE" "=" LOCALE;
	public DefaultLocaleElements getDefaultLocaleAccess() {
		return (pDefaultLocale != null) ? pDefaultLocale : (pDefaultLocale = new DefaultLocaleElements());
	}
	
	public ParserRule getDefaultLocaleRule() {
		return getDefaultLocaleAccess().getRule();
	}

	//LOCALE:
	//	"de" | "en";
	public LOCALEElements getLOCALEAccess() {
		return (pLOCALE != null) ? pLOCALE : (pLOCALE = new LOCALEElements());
	}
	
	public ParserRule getLOCALERule() {
		return getLOCALEAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
