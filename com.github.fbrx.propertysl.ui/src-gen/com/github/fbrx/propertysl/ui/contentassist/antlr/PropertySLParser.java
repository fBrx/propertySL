/*
* generated by Xtext
*/
package com.github.fbrx.propertysl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.github.fbrx.propertysl.services.PropertySLGrammarAccess;

public class PropertySLParser extends AbstractContentAssistParser {
	
	@Inject
	private PropertySLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.github.fbrx.propertysl.ui.contentassist.antlr.internal.InternalPropertySLParser createParser() {
		com.github.fbrx.propertysl.ui.contentassist.antlr.internal.InternalPropertySLParser result = new com.github.fbrx.propertysl.ui.contentassist.antlr.internal.InternalPropertySLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPackageAccess().getAlternatives_5(), "rule__Package__Alternatives_5");
					put(grammarAccess.getAbstractPropertyValueAccess().getAlternatives(), "rule__AbstractPropertyValue__Alternatives");
					put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
					put(grammarAccess.getSupportedLocalesAccess().getGroup(), "rule__SupportedLocales__Group__0");
					put(grammarAccess.getSupportedLocalesAccess().getGroup_4(), "rule__SupportedLocales__Group_4__0");
					put(grammarAccess.getFQNAccess().getGroup(), "rule__FQN__Group__0");
					put(grammarAccess.getFQNAccess().getGroup_1(), "rule__FQN__Group_1__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getComplexPropertyValueAccess().getGroup(), "rule__ComplexPropertyValue__Group__0");
					put(grammarAccess.getComplexPropertyValueItemAccess().getGroup(), "rule__ComplexPropertyValueItem__Group__0");
					put(grammarAccess.getDefaultableLocaleAccess().getGroup(), "rule__DefaultableLocale__Group__0");
					put(grammarAccess.getModelAccess().getPackagesAssignment(), "rule__Model__PackagesAssignment");
					put(grammarAccess.getPackageAccess().getCommentlinesAssignment_0(), "rule__Package__CommentlinesAssignment_0");
					put(grammarAccess.getPackageAccess().getNameAssignment_2(), "rule__Package__NameAssignment_2");
					put(grammarAccess.getPackageAccess().getSupportedLocalesAssignment_4(), "rule__Package__SupportedLocalesAssignment_4");
					put(grammarAccess.getPackageAccess().getPackagesAssignment_5_0(), "rule__Package__PackagesAssignment_5_0");
					put(grammarAccess.getPackageAccess().getPropertiesAssignment_5_1(), "rule__Package__PropertiesAssignment_5_1");
					put(grammarAccess.getSupportedLocalesAccess().getLocalesAssignment_3(), "rule__SupportedLocales__LocalesAssignment_3");
					put(grammarAccess.getSupportedLocalesAccess().getLocalesAssignment_4_1(), "rule__SupportedLocales__LocalesAssignment_4_1");
					put(grammarAccess.getPropertyAccess().getCommentlinesAssignment_0(), "rule__Property__CommentlinesAssignment_0");
					put(grammarAccess.getPropertyAccess().getKeyAssignment_1(), "rule__Property__KeyAssignment_1");
					put(grammarAccess.getPropertyAccess().getValueAssignment_3(), "rule__Property__ValueAssignment_3");
					put(grammarAccess.getSimplePropertyValueAccess().getValueAssignment(), "rule__SimplePropertyValue__ValueAssignment");
					put(grammarAccess.getComplexPropertyValueAccess().getItemsAssignment_1(), "rule__ComplexPropertyValue__ItemsAssignment_1");
					put(grammarAccess.getComplexPropertyValueItemAccess().getLangAssignment_0(), "rule__ComplexPropertyValueItem__LangAssignment_0");
					put(grammarAccess.getComplexPropertyValueItemAccess().getValueAssignment_2(), "rule__ComplexPropertyValueItem__ValueAssignment_2");
					put(grammarAccess.getDefaultableLocaleAccess().getIsDefaultAssignment_0(), "rule__DefaultableLocale__IsDefaultAssignment_0");
					put(grammarAccess.getDefaultableLocaleAccess().getLangAssignment_1(), "rule__DefaultableLocale__LangAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.github.fbrx.propertysl.ui.contentassist.antlr.internal.InternalPropertySLParser typedParser = (com.github.fbrx.propertysl.ui.contentassist.antlr.internal.InternalPropertySLParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public PropertySLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(PropertySLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
